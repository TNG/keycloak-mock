buildscript {
    repositories {
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'com.google.cloud.tools.jib' version '3.4.5' apply false
    id 'com.gradleup.nmcp' version '1.2.0' apply false
    id 'com.gradleup.nmcp.aggregation' version '1.2.0'
    id 'org.sonarqube' version '6.2.0.5505'
    id 'pl.allegro.tech.build.axion-release' version '1.20.1'
}

wrapper {
    gradleVersion = '9.0.0'
    distributionType = Wrapper.DistributionType.ALL
}

scmVersion {
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
    branchVersionIncrementer = [
        'feature/.*' : 'incrementMinor',
        'main' : 'incrementMinor',
    ]
}

allprojects {
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        google()
    }

    group = 'com.tngtech.keycloakmock'
    version = scmVersion.version
}

ext {
    assertj_version = '3.27.4'
    jjwt_version = '0.12.7'
    jsr305_version = '3.0.2'
    junit4_version = '4.13.2'
    junit5_version = '5.13.4'
    keycloak_version = '26.3.2'
    // the last version that was shipped together with keycloak server
    keycloak_js_version = '25.0.6'
    mockito_version = '5.19.0'
    picocli_version = '4.7.7'
    restassured_version = '5.5.5'
    slf4j_version = '2.0.17'
    // starting from major version 5, vert.x needs Java 11+
    vertx_version = '4.5.18'

    license_name = 'The Apache License, Version 2.0'
    license_url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

    company_name = 'TNG Technology Consulting GmbH'
    company_url = 'https://www.tngtech.com'

    release_projects = ['mock', 'mock-junit', 'mock-junit5', 'standalone']

    isReleaseVersion = !project.version.endsWith("-SNAPSHOT")
}

subprojects {
    if (release_projects.contains(project.name) || project.name == 'example-backend') {
        if ('standalone' == project.name) {
            apply plugin: 'java'
        } else {
            apply plugin: 'java-library'
        }
        apply plugin: 'jvm-test-suite'
        apply plugin: 'jacoco'

        test {
            useJUnitPlatform()
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21)
            }
            testLogging {
                events "passed", "skipped", "failed"
            }
            finalizedBy jacocoTestReport
        }

        tasks.named('compileTestJava') {
            javaCompiler = javaToolchains.compilerFor {
                languageVersion.set(JavaLanguageVersion.of(21))
            }
        }

        dependencies {
            testImplementation platform("org.junit:junit-bom:$junit5_version")

            testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
            testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
        }

        jacocoTestReport {
            reports {
                xml.required = true
                csv.required = false
                html.required = false
            }
        }

        sonar {
            properties {
                property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
            }
        }
    }

    if (release_projects.contains(project.name)) {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
        apply plugin: 'com.gradleup.nmcp'

        java {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
            toolchain {
                languageVersion = JavaLanguageVersion.of(8)
            }
        }

        if ('standalone' != project.name) {
            tasks.register('javadocJar', Jar) {
                from javadoc
                archiveClassifier = 'javadoc'
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
            tasks.register('sourceJar', Jar) {
                from sourceSets.main.allSource
                archiveClassifier = 'sources'
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
            jar {
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
        }

        publishing {
            publications {
                if ('standalone' != project.name) {
                    mavenJava(MavenPublication) {
                        from components.java
                        artifact javadocJar
                        artifact sourceJar
                    }
                }
            }
        }

        signing {
            if ('standalone' != project.name) {
                def signingKey = findProperty("signingKey")
                def signingPassword = findProperty("signingPassword")
                useInMemoryPgpKeys(signingKey, signingPassword)
                sign publishing.publications.mavenJava
            }
        }

        tasks.withType(Sign).configureEach {
            onlyIf { isReleaseVersion }
        }

        afterEvaluate {
            publishing.publications*.pom {
                licenses {
                    license {
                        name = license_name
                        url = license_url
                    }
                }
                name = "${project.group}:${project.name}"
                url = 'https://github.com/TNG/keycloak-mock'
                description = "${project.description}"

                organization {
                    name = company_name
                    url = company_url
                }

                scm {
                    url = 'https://github.com/TNG/keycloak-mock'
                    connection = 'scm:git:git://github.com/TNG/keycloak-mock'
                    developerConnection = 'scm:git:ssh://github.com/TNG/keycloak-mock'
                }

                developers {
                    developer {
                        id = 'ostrya'
                        name = 'Kai Helbig'
                        email = 'kai.helbig@tngtech.com'
                    }
                    developer {
                        id = 'ripssi'
                        name = 'Simon Rips'
                        email = 'simon.rips@tngtech.com'
                    }
                    developer {
                        id = 'christian-ertl'
                        name = 'Christian Ertl'
                        email = 'christian.ertl@tngtech.com'
                    }
                }
            }
        }
    }
}

sonar {
    skipProject = !(System.getenv('SONAR_TOKEN')?.trim())
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "tng"
        property "sonar.projectKey", "TNG_keycloak-mock"
        property "sonar.cpd.exclusions", "mock-junit/**"
        property "sonar.gradle.skipCompile", "true"
    }
}

nmcpAggregation {
    centralPortal {
        username = findProperty('sonatypeUsername')
        password = findProperty('sonatypePassword')
        publishingType = 'AUTOMATIC'
    }
}


dependencies {
    release_projects.forEach { p ->
        nmcpAggregation(project(p))
    }
}
