buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.jaredsburrows:gradle-license-plugin:0.8.42'
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.8'
        classpath 'net.researchgate:gradle-release:2.8.1'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.2'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

wrapper {
    gradleVersion = '5.6.3'
    distributionType = Wrapper.DistributionType.ALL
}

scmVersion {
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
    branchVersionIncrementer = [
        'feature/.*' : 'incrementMinor',
        'master' : 'incrementMinor',
    ]
}

allprojects {
    repositories {
        mavenCentral()
    }

    group = 'com.tngtech.keycloakmock'
    version = scmVersion.version
}

ext {
    assertj_version = '3.13.2'
    jjwt_version = '0.10.7'
    junit5_version = '5.5.2'
    picocli_version = '4.0.4'
    restassured_version = '4.1.2'
    vertx_version = '3.8.3'

    license_name = 'The Apache License, Version 2.0'
    license_url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

    company_name = 'TNG Technology Consulting GmbH'
    company_url = 'https://www.tngtech.com'

    release_projects = ['mock', 'mock-junit', 'mock-junit5', 'standalone']
}

subprojects {
    apply plugin: 'com.jaredsburrows.license'
    apply plugin: 'com.github.sherter.google-java-format'

    if (release_projects.contains(project.name)) {
        apply plugin: 'net.researchgate.release'

        if ('standalone'.equals(project.name)) {
            apply plugin: 'java'
        } else {
            apply plugin: 'java-library'
        }
        apply plugin: 'maven'
        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        sourceCompatibility = '1.8'

        if (!'standalone'.equals(project.name)) {
            task javadocJar(type: Jar) {
                from javadoc
                classifier 'javadoc'
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
            task sourceJar(type: Jar) {
                from sourceSets.main.allSource
                classifier 'sources'
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
            jar {
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
        }

        dependencies {
            implementation 'com.google.code.findbugs:jsr305:3.0.2'
        }

        publishing {
            publications {
                if (!'standalone'.equals(project.name)) {
                    mavenJava(MavenPublication) {
                        from components.java
                        artifact javadocJar
                        artifact sourceJar
                    }
                }
            }
            repositories.maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    credentials.username project.findProperty('sonatypeUsername')
                    credentials.password project.findProperty('sonatypePassword')
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                } else {
                    credentials.username project.findProperty('sonatypeUsername')
                    credentials.password project.findProperty('sonatypePassword')
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                }
            }
        }
        afterReleaseBuild.dependsOn publish
        compileJava.dependsOn 'googleJavaFormat'

        signing {
            required {
                gradle.taskGraph.hasTask('uploadArchives')
            }
            if (!'standalone'.equals(project.name)) {
                sign publishing.publications.mavenJava
            }
        }

        tasks.withType(Sign) {
            onlyIf { project.hasProperty('sonatypeUsername') }
        }

        afterEvaluate {
            publishing.publications*.pom {
                licenses {
                    license {
                        name = license_name
                        url = license_url
                    }
                }
                name = "${project.group}:${project.name}"
                url = 'https://github.com/TNG/keycloak-mock'
                description = "${project.description}"


                organization {
                    name = company_name
                    url = company_url
                }

                scm {
                    url = 'https://github.com/TNG/keycloak-mock'
                    connection = 'scm:git:git://github.com/TNG/keycloak-mock'
                    developerConnection = 'scm:git:ssh://github.com/TNG/keycloak-mock'
                }

                developers {
                    developer {
                        id = 'ostrya'
                        name = 'Kai Helbig'
                        email = 'kai.helbig@tngtech.com'
                    }
                    developer {
                        id = 'ripssi'
                        name = 'Simon Rips'
                        email = 'simon.rips@tngtech.com'
                    }
                }
            }
        }
    }
}
