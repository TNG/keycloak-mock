buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.jk1.dependency-license-report' version '2.0' apply false
    id 'com.google.cloud.tools.jib' version '3.2.1' apply false
    id 'org.sonarqube' version '3.3'
    id 'pl.allegro.tech.build.axion-release' version '1.13.7'
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}

scmVersion {
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
    branchVersionIncrementer = [
        'feature/.*' : 'incrementMinor',
        'main' : 'incrementMinor',
    ]
}

allprojects {
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        google()
    }

    group = 'com.tngtech.keycloakmock'
    version = scmVersion.version
}

ext {
    assertj_version = '3.22.0'
    jjwt_version = '0.11.5'
    junit4_version = '4.13.2'
    junit5_version = '5.8.2'
    keycloak_version = '18.0.0'
    mockito_version = '4.5.1'
    picocli_version = '4.6.3'
    restassured_version = '5.0.1'
    slf4j_version = '1.7.36'
    vertx_version = '4.3.0'

    license_name = 'The Apache License, Version 2.0'
    license_url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

    company_name = 'TNG Technology Consulting GmbH'
    company_url = 'https://www.tngtech.com'

    release_projects = ['mock', 'mock-junit', 'mock-junit5', 'standalone']
}

subprojects {
    apply plugin: 'com.github.jk1.dependency-license-report'

    if (release_projects.contains(project.name)) {
        apply plugin: 'jacoco'
        if ('standalone' == project.name) {
            apply plugin: 'java'
        } else {
            apply plugin: 'java-library'
        }
        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'

        if ('standalone' != project.name) {
            task javadocJar(type: Jar) {
                from javadoc
                classifier 'javadoc'
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
            task sourceJar(type: Jar) {
                from sourceSets.main.allSource
                classifier 'sources'
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
            jar {
                metaInf {
                    from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
                }
            }
        }

        dependencies {
            implementation 'com.google.code.findbugs:jsr305:3.0.2'
        }

        publishing {
            publications {
                if ('standalone' != project.name) {
                    mavenJava(MavenPublication) {
                        from components.java
                        artifact javadocJar
                        artifact sourceJar
                    }
                }
            }
            repositories.maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    credentials.username project.findProperty('sonatypeUsername')
                    credentials.password project.findProperty('sonatypePassword')
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                } else {
                    credentials.username project.findProperty('sonatypeUsername')
                    credentials.password project.findProperty('sonatypePassword')
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                }
            }
        }

        signing {
            required {
                gradle.taskGraph.hasTask('uploadArchives')
            }
            if ('standalone' != project.name) {
                sign publishing.publications.mavenJava
            }
        }

        tasks.withType(Sign) {
            onlyIf { project.hasProperty('sonatypeUsername') }
        }

        test {
            finalizedBy jacocoTestReport
        }

        jacocoTestReport {
            reports {
                xml.required = true
                csv.required = false
                html.required = false
            }
        }

        sonarqube {
            properties {
                property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
            }
        }

        afterEvaluate {
            publishing.publications*.pom {
                licenses {
                    license {
                        name = license_name
                        url = license_url
                    }
                }
                name = "${project.group}:${project.name}"
                url = 'https://github.com/TNG/keycloak-mock'
                description = "${project.description}"

                organization {
                    name = company_name
                    url = company_url
                }

                scm {
                    url = 'https://github.com/TNG/keycloak-mock'
                    connection = 'scm:git:git://github.com/TNG/keycloak-mock'
                    developerConnection = 'scm:git:ssh://github.com/TNG/keycloak-mock'
                }

                developers {
                    developer {
                        id = 'ostrya'
                        name = 'Kai Helbig'
                        email = 'kai.helbig@tngtech.com'
                    }
                    developer {
                        id = 'ripssi'
                        name = 'Simon Rips'
                        email = 'simon.rips@tngtech.com'
                    }
                    developer {
                        id = 'christian-ertl'
                        name = 'Christian Ertl'
                        email = 'christian.ertl@tngtech.com'
                    }
                }
            }
        }
    }
}

sonarqube {
    skipProject = !(System.getenv('SONAR_TOKEN')?.trim())
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "tng"
        property "sonar.projectKey", "TNG_keycloak-mock"
        property "sonar.cpd.exclusions", "mock-junit/**"
    }
}
