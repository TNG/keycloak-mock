import com.github.jengelman.gradle.plugins.shadow.transformers.ApacheNoticeResourceTransformer
import com.github.jengelman.gradle.plugins.shadow.transformers.PreserveFirstFoundResourceTransformer

plugins {
    id 'application'
    id 'com.github.gmazzo.buildconfig' version '5.6.7'
    id 'com.gradleup.shadow' version '9.0.2'
}

apply plugin: 'com.google.cloud.tools.jib'

description = 'Standalone keycloak-mock server for use in frontend development'

tasks.shadowJar {
    archiveClassifier = null
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    failOnDuplicateEntries = true
    exclude 'META-INF/LICENSE.*', 'META-INF/LICENSE'
    transform(ApacheNoticeResourceTransformer.class) {
        addHeader = true
        charsetName = 'UTF-8'
        inceptionYear = '2019'
        organizationName = company_name
        organizationURL = company_url
        projectName = 'Keycloak Mock Standalone'
    }
    transform(PreserveFirstFoundResourceTransformer.class) {
        resources = ['META-INF/io.netty.versions.properties']
    }
    metaInf {
        from "${rootDir}/NOTICE", "${rootDir}/LICENSE"
    }
}

tasks.register('fakeJar', Jar) {
    from file("${project.projectDir}/src/main/resources/README.md")
    archiveClassifier = 'fake'
}

// dependencies as suggested by gradle
startScripts.dependsOn(shadowJar)
distZip.dependsOn(shadowJar)
distTar.dependsOn(shadowJar)
startShadowScripts.dependsOn(jar)
afterEvaluate {
    generateMetadataFileForShadowPublication.dependsOn(jar)
}

publishing {
    publications {
        shadow(MavenPublication) {
            from components.shadow
            artifact(fakeJar) {
                classifier = 'javadoc'
            }
            artifact(fakeJar) {
                classifier = 'sources'
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.shadow
}

configurations {
    all*.exclude group: 'javax.servlet'
}

dependencies {
    implementation project(':mock')
    implementation "com.google.code.findbugs:jsr305:$jsr305_version"
    implementation "info.picocli:picocli:$picocli_version"
    implementation "org.slf4j:slf4j-simple:$slf4j_version"
}

sonar {
    properties {
        property "sonar.coverage.exclusions", "src/main/java/com/tngtech/keycloakmock/standalone/Main.java"
    }
}

application {
    mainClass = 'com.tngtech.keycloakmock.standalone.Main'
}

buildConfig {
    buildConfigField('String', 'NAME', "\"${project.name}\"")
    buildConfigField('String', 'VERSION', "\"${project.version}\"")
}

jib {
    from {
        image = 'eclipse-temurin:21.0.8_9-jre'
    }
    to {
        image = "ghcr.io/tng/keycloak-mock:${project.version}"
        tags = ['latest']
    }
    container {
        ports = ['8000']
        mainClass = 'com.tngtech.keycloakmock.standalone.Main'
        labels = [
            "org.opencontainers.image.source": "https://github.com/TNG/keycloak-mock",
            "org.opencontainers.image.description": "Docker image for keycloak mock",
            "org.opencontainers.image.licenses": "Apache-2.0"
        ]
    }
}
